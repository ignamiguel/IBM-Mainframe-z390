TPIBM    SUBENTRY BASES=(3,4)         
         WTO   '=========>    INICIO    <========='         
         
		 BAL   5,INICIAR
MENU	 BAL   5,IMPRME_M
         WTOR  'Seleccionar una opcion [1-9]',OPCION,,WAITECB
		 WAIT  ECB=WAITECB 
         CLC   OPCION,=C'1'
		 BE    INGRESAR
		 CLC   OPCION,=C'2'
		 BE    MOSTRAR
		 CLC   OPCION,=C'3'
		 BE    SUMAR
*;		 CLC   OPCION,=C'8'
*;		 BE    CAL_MCD
		 CLC   OPCION,=C'9'
		 BE    FIN
		 
FIN      WTO   '=========>    FIN    <========='  
         SUBEXIT

*************************************
*******   INICIAR VARIABLES   *******
*************************************
INICIAR  LA    6,MAT
         LA    9,20
INITMAT  MVC   0(3,6),=X'00000F'
         LA    6,3(6)
         BCT   9,INITMAT
*;****************************
*; CARGO VALORES DE PRUEBA  **
*;****************************
         LA    6,MAT
         MVC   0(3,6),=X'00010F'
         MVC   3(3,6),=X'00002F'
         MVC   6(3,6),=X'00001F'
         MVC   9(3,6),=X'00003F'
		 MVC   12(3,6),=X'00001D'
         MVC   15(3,6),=X'00002F'
         MVC   18(3,6),=X'00001F'
         MVC   21(3,6),=X'00001F'
		 MVC   24(3,6),=X'00005F'
         MVC   27(3,6),=X'00003F'
         BR    5

************************************
*******         MENU         *******
************************************
IMPRME_M WTO   '---------------------------------'
         WTO   '---------      MENU     ---------'
         WTO   '---------------------------------'
         WTO   '1) Ingresar fraccion'
         WTO   '2) Ver fracciones ingresadas'
         WTO   '3) Sumar todas las fracciones'		 		 
         WTO   '6) Calcular expresion decimal'	
         WTO   '7) Forma fraccionaria de un nro periodico'	
         WTO   '8) Calcular MCD'			 
         WTO   '9) Salir'		 
		 BR    5
		 
*************************************
*******   INGRESAR FRACCION   *******
*************************************
INGRESAR LA    6,MAT
         WTOR  'Seleccionar posicion arreglo [0-9]',ORDEN,,WAITECB
		 WAIT  ECB=WAITECB 
		 CLC   ORDEN,=C'0'
		 BL    INVORDEN
		 CLC   ORDEN,=C'9'
		 BH    INVORDEN

		 PACK  ORDENPCK,ORDEN
		 CVB   9,ORDENPCK
		 LA    8,0
		 
		 M     8,=F'6'
		 AR    6,9
		 
		 LA    7,0
SIGNO_F  WTOR  'Ingresar signo (+ o -)',SIGNO,,WAITECB
		 WAIT  ECB=WAITECB
		 CLC   SIGNO,=C'+'
		 BE    NUM_F
		 CLC   SIGNO,=C'-'
		 BE    NEGATIVA
		 WTO   'Signo Invalido!'
		 B     SIGNO_F

NEGATIVA LA    7,1 
		 
NUM_F	 WTOR  'Ingresar el numerador (4 DIGITOS)',NUMRDOR,,WAITECB
         WAIT  ECB=WAITECB
*; TODO: VALIDAR QUE NO SEA 0000 *		   
		 WTOR  'Ingresar el denominador (4 DIGITOS)',DENMDOR,,WAITECB
		 WAIT  ECB=WAITECB
*; TODO: VALIDAR QUE NO SEA 0000 *
		 
*; EMPAQUETO *
		 PACK  AUXNUM1,NUMRDOR
		 PACK  AUXNUM2,DENMDOR		 
		 
		 LA    8,0
		 CR    7,8
		 BE    POSITIVA		 
         MVN   AUXNUM1+2(1),=X'DD'
		 
POSITIVA MVC   0(3,6),AUXNUM1	 
         MVC   3(3,6),AUXNUM2
         B     MENU
*;****************************
*; MENSAJE DE ERROR AUXILIAR *
*;****************************
INVORDEN WTO   'Posicion invalida!'
         B     INGRESAR
		 
***************************
*******   MOSTRAR   ******* 
***************************
MOSTRAR  LA    6,MAT
         ZAP   ORDENPCK,=P'0'
         
         LA    7,10
         LA    9,6
IMPRME_F MVC   AUXNUM1,0(6)
		 MVC   AUXNUM2,3(6)
		 
		 CP    AUXNUM1,=P'0'
		 BE    NO_MOST
		 
		 UNPK  NUMRDOR,AUXNUM1
		 UNPK  DENMDOR,AUXNUM2
 
         MVC   SIGNO,=C' '
		 CP    AUXNUM1,=P'0'
		 BH    SIN_SIGN
		 BE    SIN_SIGN
         MVC   SIGNO,=C'-'
	     MVZ   NUMRDOR+3(1),=X'FF'
		 
SIN_SIGN UNPK  ORDEN,ORDENPCK
         MVZ   ORDEN(1),=X'FF' 
         MVC   FRAC+9(1),ORDEN
         MVC   FRAC+12(1),SIGNO
         MVC   FRAC+13(4),NUMRDOR
         MVC   FRAC+17(1),=C'/'
         MVC   FRAC+18(4),DENMDOR
		 WTO   MF=(E,FRAC-4)

NO_MOST  AP    ORDENPCK,=P'1'
		 AR    6,9
		 BCT   7,IMPRME_F
		 
		 B     MENU
*************************************
*******    SUMAR FRACCIONES   ******* 
*************************************
SUMAR    LA    6,MAT
         LA    7,10

*; INICIALIZO El RES_NUM EN 0 Y RES_DEN EN 1
*; ELEMENTO NEUTRO PARA LA SUMA
         ZAP   RES_NUM,=P'0'
         ZAP   RES_DEN,=P'1'
    
*; ME GUARDO EL RES_DEN ANTERIOR
ITER_SUM	 ZAP   RES_AUX,RES_DEN
		 
*; SI EL DEN = 0, NO LO SUMO 
         CP    3(3,6),=P'0'
		 BE    INCR_MAT
		 
*; MULTIPLICO RES_DEN X EL DEN DE LA FRACCION		 
		 MP    RES_DEN,3(3,6)

*; MULTIPLICO RES_AUX X EL NUM DE LA FRACCION		 
		 MP    RES_AUX,0(3,6)

*; MULTIPLICO RES_NUM X EL DEN DE LA FRACCION		 
		 MP    RES_NUM,3(3,6)

*; SUMO RES_NUM + RES_AUX		 
		 AP    RES_NUM,RES_AUX
         
*; CALCULO EL MAXIMO COMUN DIVISOR *
         ZAP   AUXNUM1,RES_NUM
		 ZAP   AUXNUM2,RES_DEN
		 
		 BAL   14,CAL_MCD
*; SIMPLIFICO SI MCD != 1*		 
		 ZAP   DIVISOR,RES_AUX
         CP    DIVISOR,=P'1'
		 BE    INCR_MAT
		 
		 LA   11,DIVIDEND
		 ZAP  DIVIDEND,RES_NUM
         DP   DIVIDEND,DIVISOR
         ZAP  RES_NUM,0(3,11)

		 ZAP  DIVIDEND,RES_DEN
         DP   DIVIDEND,DIVISOR
         ZAP  RES_DEN,0(3,11)
		 
*; INCREMENTO EL REGISTRO APUNTANDO A MATRIX 
INCR_MAT A     6,=F'6' 		 
		 BCT   7,ITER_SUM
    		 
*;***************************
*;   MUESTRO EL RESULTADO  **
*;***************************
         MVC   RE_SUMA+0(3),=C'=: '
		 
*; PREGUNTO EL SIGNO 
         MVC   SIGNO,=C' '
		 CP    RES_NUM,=P'0'
         BH    TOT_POS		 
		 BE    TOT_POS
		 MVC   SIGNO,=C'-'
		 
TOT_POS	 MVC   RE_SUMA+3(1),SIGNO

         UNPK  RESULT,RES_NUM
		 MVZ   RESULT+6(1),=X'FF'         
		 MVC   RE_SUMA+4(7),RESULT
		 
		 MVC   RE_SUMA+11(1),=C'/'
		 
		 UNPK  RESULT,RES_DEN
		 MVZ   RESULT+6(1),=X'FF'
		 MVC   RE_SUMA+12(7),RESULT
		 
		 WTO   MF=(E,RE_SUMA-4)
		 
		 B     MENU	 

*******************************************
*******   MAXIMO COMUN DIVISOR      ******* 
*******************************************
*; MCD(A,B) UTILIZA COMO PARAMETRO LAS VARIABLES *
*; AUXNUM1 Y AUXNUM2 *
CAL_MCD  MVC   FACTNUM1(7),=X'00001C1C00001D'
         MVC   FACTNUM2(7),=X'00001C1C00001D'
         BAL   5,FACTRIZR
         MVC   FACTNUM2,FACTNUM1

		 ZAP   AUXNUM1,AUXNUM2
		 BAL   5,FACTRIZR

*; INICIALIZO RES_AUX (MCD) EN 1 *
         ZAP   RES_AUX,=P'1'
		 
*; COMPARO LOS FACTORES *
         LA    9,FACTNUM1
		 LA    8,FACTNUM2
		 
EVAL_FAC CP    0(3,9),0(3,8)
		 BE    EVAL_POT
		 BL    INCR_1
		 BH    INCR_2

INCR_1   CP    0(3,9),=P'-1'
         BE    FN_EVL_F
         A     9,=F'4'
         B     EVAL_FAC

INCR_2   CP    0(3,8),=P'-1'
         BE    FN_EVL_F
         A     8,=F'4'
         B     EVAL_FAC

*; COPIO EL FACTOR Y COMPARO LAS POTENCIAS *
EVAL_POT ZAP   AUXNUM3,0(3,9)
         CP    3(1,9),3(1,8)
         BE    COPIAR_1  
         BL    COPIAR_1
         BH	   COPIAR_2 

COPIAR_1 ZAP   OPERAN1,3(1,9)
         B     MULT_FAC
COPIAR_2 ZAP   OPERAN1,3(1,8)
    
MULT_FAC CVB   10,OPERAN1
         
EJE_M_F  MP    RES_AUX,AUXNUM3   
         BCT   10,EJE_M_F
         
		 A     9,=F'4'
*		 A     8,=F'4'
		 
		 B     EVAL_FAC

FN_EVL_F MVC   RE_SUMA(19),=C'                     ' 
		 
*; IMPRIMO EL MCD ALOJADO EN RES_AUX *
		 UNPK  RESULT,RES_AUX
         MVZ   RESULT+6(1),=X'FF'		 
         
		 MVC   RE_SUMA+1(7),RESULT
		 
		 WTO   MF=(E,RE_SUMA-4)

         BR    14		 
		 
*;*********************************
*;******   FACTORIZAR     *********
*;*********************************		 
*; FORMATO: 3 BYTE PARA EL FACTOR Y 1 PARA LA POTENCIA *
*; FACTNUM1 LONGITUD P20 * 
FACTRIZR LA    8,FACTNUM1
		 LA    9,DIVIDEND
		 
         CP    AUXNUM1,=P'1'
         BE    CASO_1
         
*; PRIMERO PRIMO = 2 *
		 ZAP   DIVISOR,=P'2'
		 ZAP   AUX,=P'0'
		 
*; DIVIDO POR PRIMO MIENTRAS RESTO = 0 *         
CAL_FAC	 CP    AUXNUM1,=P'1'
         BE    FIN_FAC
         ZAP   DIVIDEND,AUXNUM1
         DP    DIVIDEND,DIVISOR
		 
*; EVALUO SI RESTO = 0 *
         CP    3(3,9),=P'0'
		 BE    SEGUIR_D
		 BNE   PROXPRIM

SEGUIR_D ZAP   AUXNUM1,0(3,9)
         AP    AUX,=P'1'
         B     CAL_FAC	 

*; EVALUO SI TENGO QUE GUARDAR EN FACTNUM1 *
PROXPRIM CP    AUX,=P'0'
         BE    NEXT

*; GUARDO EL FACTOR CON SU POTENCIA *         
		 ZAP   0(3,8),DIVISOR
		 ZAP   3(1,8),AUX
         A     8,=F'4'
		 ZAP   AUX,=P'0'
		 B     NEXT

*; CALCULO EL PROXIMO PRIMO Y LO DEVUELVO EN DIVISOR *
NEXT     BAL   10,CAL_PRIM
		 B     CAL_FAC
		 
CASO_1   ZAP   DIVISOR,=P'1'
         ZAP   AUX,=P'1'
		 
*; CIERRO FACTNUM1 CON UN -1 *
FIN_FAC  ZAP   0(3,8),DIVISOR
		 ZAP   3(1,8),AUX
         A     8,=F'4'
		 ZAP   0(3,8),=P'-1'
         BR    5 

*;*********************************
*;****** CALCULAR PRIMO   *********
*;*********************************
CAL_PRIM CP    DIVISOR,=P'2'
         BE    DVLVR_3
		  
*; SI DIVISOR != 2, INCREMENTO DE A 2 *
		 AP    DIVISOR,=P'2'		  
		  
		 LA    11,DIVIDEND 
		 ZAP   DIVAUX,=P'2'		 

*; CONTROLO QUE RESTO SIEMPRE != 0  *
NACHO    ZAP   DIVIDEND,DIVISOR
         DP    DIVIDEND,DIVAUX		  
		 CP    3(3,11),=P'0'
		 BE    SIG_PRIM
		  
		 AP    DIVAUX,=P'1'
		 CP    DIVAUX,DIVISOR
		 BE    DVLVR_PR
		 B     NACHO

SIG_PRIM AP    DIVISOR,=P'2'
         ZAP   DIVAUX,=P'2'		 
         B     NACHO		  

DVLVR_3  ZAP   DIVISOR,=P'3'
DVLVR_PR BR    10
		  
********************************************
*******   DECLARACION DE VARIABLES   *******
********************************************
OPCION   DS    CL1
ORDEN    DS    CL1
ORDENPCK DS    PL8

SIGNO    DS    CL1  
NUMRDOR  DS    CL4
DENMDOR  DS    CL4

         DC    H'26'
		 DC    H'0'
FRAC     DC    C'Fraccion X:           '

MAT      DS    20PL3

RES_NUM  DS    PL5
RES_DEN  DS    PL5
RES_AUX  DS    PL5

DIVIDEND DS    PL6
DIVISOR  DS    PL3
DIVAUX   DS    PL3

         DC    H'11'
		 DC    H'0'
RESULT   DS    CL7

         DC    H'23'
		 DC    H'0'
RE_SUMA  DS    CL19

WAITECB  DC    F'0'

AUXNUM1  DS    PL3
AUXNUM2  DS    PL3
AUXNUM3  DS    PL3
AUXNUM4  DS    PL3

A_INDICE DS    10P'0'
A_AUX    DC    X'0C1C2C3C4C5C6C7C8C9C'
EMP_L2   DC    P'00'
EMP_INDI DC    P'000000000000000'
AUX      DS    PL1
AUX2     DS    PL1

OPERAN1  DS    PL8
OPERAN2  DS    PL8

ORDN_ASC DS    PL1
COMA_FLG DS    PL1

DCIMALES DS    CL5
ENTEROS  DS    CL8


FACTNUM1 DS    PL25
FACTNUM2 DS    PL25

		 END
